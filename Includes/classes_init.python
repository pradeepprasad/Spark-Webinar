{"version":"NotebookV1","origId":17393085,"name":"classes_init","language":"python","commands":[{"version":"CommandV1","origId":17393086,"guid":"094788ac-2264-4b1d-8f2f-98bf7a0e6cb4","subtype":"command","commandType":"auto","position":0.25,"command":"%md ### Classes and Utility functions for the Model Registry Demo Notebook","commandVersion":17,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"da61644c-4253-4b7c-95b0-28d712fea960"},{"version":"CommandV1","origId":17393087,"guid":"91f0018a-2954-4efb-82e1-114904b7219f","subtype":"command","commandType":"auto","position":0.5,"command":"import pandas as pd\nimport time\nfrom mlflow.tracking.client import MlflowClient\nfrom mlflow.entities.model_registry.model_version_status import ModelVersionStatus","commandVersion":18,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1575079158040,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b0231fd4-f36b-4f46-8a50-96cb438c45a6"},{"version":"CommandV1","origId":17393088,"guid":"59d55765-057d-438e-aa7e-0a588582eba4","subtype":"command","commandType":"auto","position":0.75,"command":"import warnings\nwarnings.filterwarnings(\"ignore\")","commandVersion":3,"state":"error","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"1a294ebe-e219-458d-b0be-725a2118b53b"},{"version":"CommandV1","origId":17393089,"guid":"f21615ee-4523-4977-b9f8-4ed0ac229248","subtype":"command","commandType":"auto","position":1.0,"command":"class Utils:\n  @staticmethod\n  def load_data(path, index_col=0):\n    df = pd.read_csv(path,index_col=0)\n    return df\n  \n  @staticmethod\n  def get_training_data(df):\n    training_data = pd.DataFrame(df[\"2014-01-01\":\"2018-01-01\"])\n    X = training_data.drop(columns=\"power\")\n    y = training_data[\"power\"]\n    return X, y\n\n  @staticmethod\n  def get_validation_data(df):\n    validation_data = pd.DataFrame(df[\"2018-01-01\":\"2019-01-01\"])\n    X = validation_data.drop(columns=\"power\")\n    y = validation_data[\"power\"]\n    return X, y\n\n  @staticmethod\n  def get_weather_and_forecast(df):\n    format_date = lambda pd_date : pd_date.date().strftime(\"%Y-%m-%d\")\n    today = pd.Timestamp('today').normalize()\n    week_ago = today - pd.Timedelta(days=5)\n    week_later = today + pd.Timedelta(days=5)\n\n    past_power_output = pd.DataFrame(df)[format_date(week_ago):format_date(today)]\n    weather_and_forecast = pd.DataFrame(df)[format_date(week_ago):format_date(week_later)]\n    if len(weather_and_forecast) < 10:\n      past_power_output = pd.DataFrame(df).iloc[-10:-5]\n      weather_and_forecast = pd.DataFrame(df).iloc[-10:]\n\n    return weather_and_forecast.drop(columns=\"power\"), past_power_output[\"power\"]\n  \n  @staticmethod\n  def wait_until_ready(model_name, model_version):\n    client = MlflowClient()\n    for _ in range(10):\n      model_version_details = client.get_model_version_details(\n        name=model_name,\n        version=model_version,\n      )\n      status = ModelVersionStatus.from_string(model_version_details.status)\n      print(\"Model status: %s\" % ModelVersionStatus.to_string(status))\n      if status == ModelVersionStatus.READY:\n        break\n      time.sleep(1)","commandVersion":49,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1575079158055,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2273040f-af21-434e-be53-6eda2481aa47"},{"version":"CommandV1","origId":17393090,"guid":"7bf4878d-09c9-4add-b78d-f57518c87ada","subtype":"command","commandType":"auto","position":1.0625,"command":"displayHTML(\"\"\"\n<div> Declared Utils class with utility methods:</div> \n  <li> Declared <b style=\"color:green\">load_data(path, index_col=0)</b> returns Pandas DataFrame for diagnostics</li>\n  <li> Declared <b style=\"color:green\">get_training_data(df)</b> returns X, y Pandas dataframe</li>\n  <li> Declared <b style=\"color:green\">get_validation_data(df)</b> returns val_x, val_y Pandas dataframe</li>\n  <li> Declared <b style=\"color:green\">get_weather_and_forecast(df) returns Pandas Dataframe with dropped \"power\" columns</b></li>\n  <li> Declared <b style=\"color:green\">wait_until_ready(model_name, model_version)</b></li>\n   <br/>\n\"\"\")","commandVersion":9,"state":"finished","results":{"type":"htmlSandbox","data":"\n<div> Declared Utils class with utility methods:</div> \n  <li> Declared <b style=\"color:green\">load_data(path, index_col=0)</b> returns Pandas DataFrame for diagnostics</li>\n  <li> Declared <b style=\"color:green\">get_training_data(df)</b> returns X, y Pandas dataframe</li>\n  <li> Declared <b style=\"color:green\">get_validation_data(df)</b> returns val_x, val_y Pandas dataframe</li>\n  <li> Declared <b style=\"color:green\">get_weather_and_forecast(df) returns Pandas Dataframe with dropped \"power\" columns</b></li>\n  <li> Declared <b style=\"color:green\">wait_until_ready(model_name, model_version)</b></li>\n   <br/>\n","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"textData":"<div class=\"ansiout\"></div>"},"errorSummary":null,"error":null,"workflows":[],"startTime":1575308787491,"submitTime":1575308787420,"finishTime":1575308787506,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"69ee11bc-79cd-4078-a0b4-793b8268e210"},{"version":"CommandV1","origId":17393091,"guid":"9143c5f9-ea52-4d53-82db-4c5b3fffc7a3","subtype":"command","commandType":"auto","position":1.125,"command":"import pandas as pd\nimport matplotlib.dates as mdates\nfrom matplotlib import pyplot as plt","commandVersion":3,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c33d9040-1288-49cc-a90a-4bd01755ed98"},{"version":"CommandV1","origId":17393092,"guid":"af8bdb16-12e2-44de-8fce-4060aed7da2d","subtype":"command","commandType":"auto","position":1.25,"command":"class PlotUtils:\n    @staticmethod\n    def plot(model_uri, power_predictions, past_power_output):\n      index = power_predictions.index\n      fig = plt.figure(figsize=(11, 7))\n      ax = fig.add_subplot(111)\n      ax.set_xlabel(\"Date\", size=20, labelpad=20)\n      ax.set_ylabel(\"Power\\noutput\\n(MW)\", size=20, labelpad=60, rotation=0)\n      ax.tick_params(axis='both', which='major', labelsize=17)\n      ax.xaxis.set_major_formatter(mdates.DateFormatter('%m/%d'))\n      ax.plot(index[:len(past_power_output)], past_power_output, label=\"True\", color=\"red\", alpha=0.5, linewidth=4)\n      ax.plot(index, power_predictions, \"--\", label=\"Predicted by {}\".format(model_uri), color=\"blue\", linewidth=3)\n      ax.set_ylim(ymin=0, ymax=max(3500, int(max(power_predictions.values) * 1.3)))\n      ax.legend(fontsize=14)\n      plt.title(\"Wind farm power output and projections\", size=24, pad=20)\n      plt.tight_layout()\n      display(plt.show())\n      \n    @staticmethod\n    def forecast_power(model_uri, wind_farm_data):\n      print(\"Loading registered model version from URI: '{model_uri}'\".format(model_uri=model_uri))\n      model = mlflow.pyfunc.load_model(model_uri)\n      weather_data, past_power_output = Utils.get_weather_and_forecast(wind_farm_data)\n      power_predictions = pd.DataFrame(model.predict(weather_data))\n      power_predictions.index = pd.to_datetime(weather_data.index)\n      PlotUtils.plot(model_uri, power_predictions, past_power_output)","commandVersion":29,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0b206e07-3cb0-41b2-96a7-af4bc75b4e09"},{"version":"CommandV1","origId":17393093,"guid":"c1bf8e4b-6c71-40e5-beae-4c70fa48b206","subtype":"command","commandType":"auto","position":1.375,"command":"displayHTML(\"\"\"\n<div> Declared PlotUtils class with utility methods:</div> \n  <li> Declared <b style=\"color:green\">plot(model_uri, power_predictions, past_power_output)</b> Plots a graph </li>\n  <li> Declared <b style=\"color:green\">forecast_power(model_uri, df)</b> Plots a graph</b></li>\n   <br/>\n\"\"\")","commandVersion":59,"state":"finished","results":{"type":"htmlSandbox","data":"\n<div> Declared PlotUtils class with utility methods:</div> \n  <li> Declared <b style=\"color:green\">plot(model_uri, power_predictions, past_power_output)</b> Plots a graph </li>\n  <li> Declared <b style=\"color:green\">forecast_power(model_uri, df)</b> Plots a graph</b></li>\n   <br/>\n","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"textData":"<div class=\"ansiout\"></div>"},"errorSummary":null,"error":null,"workflows":[],"startTime":1575231620851,"submitTime":1575231620794,"finishTime":1575231620869,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"362ccff6-f624-434e-be87-c27dd5f56c5f"},{"version":"CommandV1","origId":17393094,"guid":"94fe0f23-eacb-4ba9-a4ef-bfc35e432f7b","subtype":"command","commandType":"auto","position":1.75,"command":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nimport mlflow\nimport mlflow.keras\n\nprint(\"Using mlflow version {}\".format(mlflow.__version__))","commandVersion":30,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1575079158077,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ff36e874-66d8-4558-85ed-9d767dc0b749"},{"version":"CommandV1","origId":17393095,"guid":"8b726c67-78c4-41dc-8de2-8a58a0af01b9","subtype":"command","commandType":"auto","position":2.0,"command":"class KerasModel:\n  def __init__(self, X_train, input_units = 100, activation=\"relu\", **kwargs):\n    self._model = Sequential()\n    self._model.add(Dense(input_units, input_shape=(X_train.shape[-1],), activation=activation, name=\"hidden_layer\"))\n    self._model.add(Dense(1))\n    self._model.compile(**kwargs)\n  \n  def mlflow_run(self, X_train, y_train, run_name=\"Keras NN: Power Forecasting Model\", **kwargs):\n    mlflow.keras.autolog()\n    hist = self._model.fit(X_train, y_train, **kwargs)\n    mse = hist.history['loss'][-1]\n    #mlflow.log_metric(\"mse\", mse)\n    return mse","commandVersion":348,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1575079158096,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"7b58e3a3-2e88-4d12-994e-4a2f83e58491"},{"version":"CommandV1","origId":17393096,"guid":"ab0c3ff0-c880-4d37-8d94-ba528e2964ff","subtype":"command","commandType":"auto","position":3.0,"command":"displayHTML(\"\"\"\n<div> Declared KerasModel class with public methods:</div> \n  <li> Declared <b style=\"color:green\"> mlflow_run(model, X_train, y_train, **kwargs)</b> returns MLflow run_id </li>\n  <br/>\n\"\"\")","commandVersion":111,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1575079158106,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c08d94de-552c-405e-942d-ff9e07de3859"},{"version":"CommandV1","origId":17393097,"guid":"f2253f74-e48e-4491-ad1f-a21f8f4ce334","subtype":"command","commandType":"auto","position":3.5,"command":"import mlflow.sklearn\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error","commandVersion":2,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1575079158121,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"99e999ff-f72c-4747-a82e-890bc84564a1"},{"version":"CommandV1","origId":17393098,"guid":"b90657e0-0b71-43f7-97d5-904c2f019367","subtype":"command","commandType":"auto","position":4.0,"command":"class RFRModel():\n  def __init__(self, params={}):\n    self.rf = RandomForestRegressor(**params)\n    self.params = params\n    self._mse = None\n    self._rsme = None\n    \n  @classmethod\n  def new_instance(cls, params={}):\n    return cls(params)\n  \n  def model(self):\n    return self.rf\n  \n  @property\n  def mse(self):\n    return self._mse\n  \n  @mse.setter\n  def mse(self, value):\n    self._mse = value\n  \n  @property\n  def rsme(self):\n    return self._rsme\n  \n  @rsme.setter\n  def rsme(self, value):\n    self._rsme = value\n  \n  def mlflow_run(self, X_train, y_train, val_x, val_y, model_name, run_name=\"Random Forest Regressor: Power Forecasting Model\"):\n    with mlflow.start_run(run_name=run_name) as run:\n      mlflow.log_params(self.params)\n      self.rf.fit(X_train, y_train)\n      self._mse = mean_squared_error(self.rf.predict(val_x), val_y)\n      self._rsme = np.sqrt(self._mse)\n      print(\"Validation MSE: %d\" % self._mse)\n      print(\"Validation RMSE: %d\" % self._rsme)\n      mlflow.log_metric(\"mse\", self._mse)\n      mlflow.log_metric(\"rmse\", self._rsme)\n      # Specify the `registered_model_name` parameter of the `mlflow.sklearn.log_model()`\n      # function to register the model with the MLflow Model Registry. This automatically\n      # creates a new model version\n      mlflow.sklearn.log_model(\n        sk_model= self.model(),\n        artifact_path=\"sklearn-model\",\n        registered_model_name=model_name,\n      )\n      run_id = run.info.run_id\n    return run_id","commandVersion":299,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":1575079158137,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"18279f5a-2e10-40d9-916f-d39bbff0a8cc"},{"version":"CommandV1","origId":17393099,"guid":"63d7d956-c970-4695-a9d5-76d7cee385da","subtype":"command","commandType":"auto","position":5.0,"command":"displayHTML(\"\"\"\n<div> Declared RFRModel class with public methods:</div> \n  <li> Declared <b style=\"color:green\">  mlflow_run(X_train, y_train, val_x, val_y, model_name, run_name=\"Random Forest Regressor: Power Forecasting Model)</b> returns MLflow run_id </li>\n   <li> Declared <b style=\"color:green\">mse()</b> returns models 'mse' accuracy</li>\n   <li> Declared <b style=\"color:green\">rmse()</b> returns models 'rmse' accuracy</li>\n  <br/>\n<div> All done!</div>\n\"\"\")","commandVersion":95,"state":"finished","results":{"type":"htmlSandbox","data":"\n<div> Declared RFRModel class with public methods:</div> \n  <li> Declared <b style=\"color:green\">  mlflow_run(X_train, y_train, val_x, val_y, model_name, run_name=\"Random Forest Regressor: Power Forecasting Model)</b> returns MLflow run_id </li>\n   <li> Declared <b style=\"color:green\">mse()</b> returns models 'mse' accuracy</li>\n   <li> Declared <b style=\"color:green\">rmse()</b> returns models 'rmse' accuracy</li>\n  <br/>\n<div> All done!</div>\n","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"textData":"<div class=\"ansiout\"></div>"},"errorSummary":null,"error":null,"workflows":[],"startTime":1575308886872,"submitTime":1575308886851,"finishTime":1575308886884,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"jules@databricks.com","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f5778570-415c-49f6-a288-ae0319942b28"},{"version":"CommandV1","origId":17393100,"guid":"103802e6-acef-442c-85b7-454db204fd95","subtype":"command","commandType":"auto","position":6.0,"command":"","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"87cd6d3a-76bd-43a7-919e-2a0ddc63ed71"}],"dashboards":[],"guid":"0df38c13-8af3-4c5e-a8dc-9f70d8b8d1d3","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}