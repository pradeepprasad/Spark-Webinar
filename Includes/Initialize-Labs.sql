{"version":"NotebookV1","origId":17383847,"name":"Initialize-Labs","language":"sql","commands":[{"version":"CommandV1","origId":17383848,"guid":"8140ab38-e68b-4099-b24d-c91fa06c4262","subtype":"command","commandType":"auto","position":1.0,"command":"\n%python\ntestResults = dict()\n\ndef toHash(value):\n  from pyspark.sql.functions import hash\n  from pyspark.sql.functions import abs\n  values = [(value,)]\n  return spark.createDataFrame(values, [\"value\"]).select(abs(hash(\"value\")).cast(\"int\")).first()[0]\n\ndef clearYourResults(passedOnly = True):\n  whats = list(testResults.keys())\n  for what in whats:\n    passed = testResults[what][0]\n    if passed or passedOnly == False : del testResults[what]\n\ndef validateYourSchema(what, df, expColumnName, expColumnType = None):\n  label = \"{}:{}\".format(expColumnName, expColumnType)\n  key = \"{} contains {}\".format(what, label)\n\n  try:\n    actualType = df.schema[expColumnName].dataType.typeName()\n    \n    if expColumnType == None: \n      testResults[key] = (True, \"validated\")\n      print(\"\"\"{}: validated\"\"\".format(key))\n    elif actualType == expColumnType:\n      testResults[key] = (True, \"validated\")\n      print(\"\"\"{}: validated\"\"\".format(key))\n    else:\n      answerStr = \"{}:{}\".format(expColumnName, actualType)\n      testResults[key] = (False, answerStr)\n      print(\"\"\"{}: NOT matching ({})\"\"\".format(key, answerStr))\n  except:\n      testResults[what] = (False, \"-not found-\")\n      print(\"{}: NOT found\".format(key))\n      \ndef validateYourAnswer(what, expectedHash, answer):\n  # Convert the value to string, remove new lines and carriage returns and then escape quotes\n  if (answer == None): answerStr = \"null\"\n  elif (answer is True): answerStr = \"true\"\n  elif (answer is False): answerStr = \"false\"\n  else: answerStr = str(answer)\n\n  hashValue = toHash(answerStr)\n  \n  if (hashValue == expectedHash):\n    testResults[what] = (True, answerStr)\n    print(\"\"\"{} was correct, your answer: {}\"\"\".format(what, answerStr))\n  else:\n    testResults[what] = (False, answerStr)\n    print(\"\"\"{} was NOT correct, your answer: {}\"\"\".format(what, answerStr))\n\ndef summarizeYourResults():\n  html = \"\"\"<html><body><div style=\"font-weight:bold; font-size:larger; border-bottom: 1px solid #f0f0f0\">Your Answers</div><table style='margin:0'>\"\"\"\n\n  whats = list(testResults.keys())\n  whats.sort()\n  for what in whats:\n    passed = testResults[what][0]\n    answer = testResults[what][1]\n    color = \"green\" if (passed) else \"red\" \n    passFail = \"passed\" if (passed) else \"FAILED\" \n    html += \"\"\"<tr style='font-size:larger; white-space:pre'>\n                  <td>{}:&nbsp;&nbsp;</td>\n                  <td style=\"color:{}; text-align:center; font-weight:bold\">{}</td>\n                  <td style=\"white-space:pre; font-family: monospace\">&nbsp;&nbsp;{}</td>\n                </tr>\"\"\".format(what, color, passFail, answer)\n  html += \"</table></body></html>\"\n  displayHTML(html)\n\ndef logYourTest(path, name, value):\n  value = float(value)\n  if \"\\\"\" in path: raise ValueError(\"The name cannot contain quotes.\")\n  \n  dbutils.fs.mkdirs(path)\n\n  csv = \"\"\" \"{}\",\"{}\" \"\"\".format(name, value).strip()\n  file = \"{}/{}.csv\".format(path, name).replace(\" \", \"-\").lower()\n  dbutils.fs.put(file, csv, True)\n\ndef loadYourTestResults(path):\n  from pyspark.sql.functions import col\n  return spark.read.schema(\"name string, value double\").csv(path)\n\ndef loadYourTestMap(path):\n  rows = loadYourTestResults(path).collect()\n  \n  map = dict()\n  for row in rows:\n    map[row[\"name\"]] = row[\"value\"]\n  \n  return map\n\nNone","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a6525826-7bd4-40f2-9959-632ab9b10701"},{"version":"CommandV1","origId":17383849,"guid":"50b5fe8f-906d-44a3-943f-d3c9ed033b14","subtype":"command","commandType":"auto","position":2.0,"command":"%scala\nimport org.apache.spark.sql.DataFrame\n\nval testResults = scala.collection.mutable.Map[String, (Boolean, String)]()\n\ndef toHash(value:String):Int = {\n  import org.apache.spark.sql.functions.hash\n  import org.apache.spark.sql.functions.abs\n  spark.createDataset(List(value)).select(abs(hash($\"value\")).cast(\"int\")).as[Int].first()\n}\n\ndef clearYourResults(passedOnly:Boolean = true):Unit = {\n  val whats = testResults.keySet.toSeq.sorted\n  for (what <- whats) {\n    val passed = testResults(what)._1\n    if (passed || passedOnly == false) testResults.remove(what)\n  }\n}\n\ndef validateYourSchema(what:String, df:DataFrame, expColumnName:String, expColumnType:String = null):Unit = {\n  val label = s\"$expColumnName:$expColumnType\"\n  val key = s\"$what contains $label\"\n  \n  try{\n    val actualTypeTemp = df.schema(expColumnName).dataType.typeName\n    val actualType = if (actualTypeTemp.startsWith(\"decimal\")) \"decimal\" else actualTypeTemp\n    \n    if (expColumnType == null) {\n      testResults.put(key,(true, \"validated\"))\n      println(s\"\"\"$key: validated\"\"\")\n      \n    } else if (actualType == expColumnType) {\n      val answerStr = \"%s:%s\".format(expColumnName, actualType)\n      testResults.put(key,(true, \"validated\"))\n      println(s\"\"\"$key: validated\"\"\")\n      \n    } else {\n      val answerStr = \"%s:%s\".format(expColumnName, actualType)\n      testResults.put(key,(false, answerStr))\n      println(s\"\"\"$key: NOT matching ($answerStr)\"\"\")\n    }\n  } catch {\n    case e:java.lang.IllegalArgumentException => {\n      testResults.put(key,(false, \"-not found-\"))\n      println(s\"$key: NOT found\")\n    }\n  }\n}\n\ndef validateYourAnswer(what:String, expectedHash:Int, answer:Any):Unit = {\n  // Convert the value to string, remove new lines and carriage returns and then escape quotes\n  val answerStr = if (answer == null) \"null\" \n  else answer.toString\n\n  val hashValue = toHash(answerStr)\n\n  if (hashValue == expectedHash) {\n    testResults.put(what,(true, answerStr))\n    println(s\"\"\"$what was correct, your answer: ${answerStr}\"\"\")\n  } else{\n    testResults.put(what,(false, answerStr))\n    println(s\"\"\"$what was NOT correct, your answer: ${answerStr}\"\"\")\n  }\n}\n\ndef summarizeYourResults():Unit = {\n  var html = \"\"\"<html><body><div style=\"font-weight:bold; font-size:larger; border-bottom: 1px solid #f0f0f0\">Your Answers</div><table style='margin:0'>\"\"\"\n\n  val whats = testResults.keySet.toSeq.sorted\n  for (what <- whats) {\n    val passed = testResults(what)._1\n    val answer = testResults(what)._2\n    val color = if (passed) \"green\" else \"red\" \n    val passFail = if (passed) \"passed\" else \"FAILED\" \n    html += s\"\"\"<tr style='font-size:larger; white-space:pre'>\n                  <td>${what}:&nbsp;&nbsp;</td>\n                  <td style=\"color:${color}; text-align:center; font-weight:bold\">${passFail}</td>\n                  <td style=\"white-space:pre; font-family: monospace\">&nbsp;&nbsp;${answer}</td>\n                </tr>\"\"\"\n  }\n  html += \"</table></body></html>\"\n  displayHTML(html)\n}\n\ndef logYourTest(path:String, name:String, value:Double):Unit = {\n  if (path.contains(\"\\\"\")) throw new IllegalArgumentException(\"The name cannot contain quotes.\")\n  \n  dbutils.fs.mkdirs(path)\n\n  val csv = \"\"\" \"%s\",\"%s\" \"\"\".format(name, value).trim()\n  val file = \"%s/%s.csv\".format(path, name).replace(\" \", \"-\").toLowerCase\n  dbutils.fs.put(file, csv, true)\n}\n\ndef loadYourTestResults(path:String):org.apache.spark.sql.DataFrame = {\n  return spark.read.schema(\"name string, value double\").csv(path)\n}\n\ndef loadYourTestMap(path:String):scala.collection.mutable.Map[String,Double] = {\n  case class TestResult(name:String, value:Double)\n  val rows = loadYourTestResults(path).collect()\n  \n  val map = scala.collection.mutable.Map[String,Double]()\n  for (row <- rows) map.put(row.getString(0), row.getDouble(1))\n  \n  return map\n}\n\ndisplayHTML(\"\"\"\n  <div>Initializing lab environment:</div>\n  <li>Declared <b style=\"color:green\">clearYourResults(<i>passedOnly:Boolean=true</i>)</b></li>\n  <li>Declared <b style=\"color:green\">validateYourSchema(<i>what:String, df:DataFrame, expColumnName:String, expColumnType:String</i>)</b></li>\n  <li>Declared <b style=\"color:green\">validateYourAnswer(<i>what:String, expectedHash:Int, answer:Any</i>)</b></li>\n  <li>Declared <b style=\"color:green\">summarizeYourResults()</b></li>\n  <li>Declared <b style=\"color:green\">logYourTest(<i>path:String, name:String, value:Double</i>)</b></li>\n  <li>Declared <b style=\"color:green\">loadYourTestResults(<i>path:String</i>)</b> returns <b style=\"color:green\">DataFrame</b></li>\n  <li>Declared <b style=\"color:green\">loadYourTestMap(<i>path:String</i>)</b> returns <b style=\"color:green\">Map[String,Double]</b></li>\n\"\"\")\n","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"","latestUserId":"100006","commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2d0d4663-4cbf-4507-961d-7eda349fa284"}],"dashboards":[],"guid":"c8d56057-c826-4116-8c09-02c15b2d7f06","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}